---
protocol: "Uniswap-v2"
website: "https://blog.uniswap.org/uniswap-v2"
x: "https://x.com/uniswap"
github: 
  [
    "https://github.com/Uniswap/v2-core"
    "https://github.com/Uniswap/v2-periphery"
  ]
defillama_slug: ["uniswap-v2"]
chain: "Ethereum"
stage: 2
reasons: []
risks: ["L", "L", "L", "L", "L"]
author: ["CookingCryptos"]
submission_date: "2025-01-14"
publish_date: "1970-01-01"
update_date: "1970-01-01"
---

# Summary

Uniswap v2 is a decentralized automated market maker (AMM) that builds upon the original Uniswap protocol by introducing several key features to enhance functionality and flexibility for liquidity providers (LPs) and traders. Unlike its predecessor, Uniswap v2 enables direct token-to-token swaps, eliminating the need to route trades through ETH as an intermediary.
Another notable improvement is the introduction of flash swaps, which allow users to withdraw assets without upfront capital as long as the borrowed amount is returned by the end of the transaction. This feature facilitates advanced use cases like arbitrage, collateral swapping, and debt refinancing.
Additionally, Uniswap v2 integrates price oracles that mitigate manipulation risks by providing time-weighted average prices (TWAP) over a given period, which has become a critical component for DeFi protocols reliant on secure pricing mechanisms.

# Overview

## Chain

Uniswap v2 is deployed on various chains. This review is based on the Ethereum mainnet deployment of the protocol.

> Chain score: L

## Upgradeability

For some guidance:

In the upgradability section & risk we address bytecode upgrades and parameter changes that are permissioned.

This steps help you write a nice report:

1. Run the [permission scanner](https://github.com/deficollective/permission-scanner)
2. Fill in all the permissioned functions in the table (`## Permissions`)
   - Remember: Each function with a permission needs to be considered when determining the risk on Upgradability
3. Get a mechanistic and precise understanding of each permissioned function
4. Assess impact for each function, look out for
   - loss/blocking of user funds
   - loss of unclaimed yield
   - change expected behavior significantly (blacklisting/kyc/fees/...)
5. Write the impact column based on your understanding
   - A good tipp when writing the impact column below, think of least 2,3 sentences:
   1. First sentence: what it does technically, e.g "It assigns a new address to the owner variable"
   2. Second: what is the impact within the system, e.g "The owner is permissioned to raise fees"
   3. Third: Imagine faulty or malicious action, e.g "The malicious owner could raise fees to 100%, redirecting all future yield.
6. Summarise and abstract away technical details in this section here (`## Upgradeability`)

> Upgradeabillity score: L

## Autonomy

There are no particular dependencies for the Uniswap protocol.

> Autonomy score: L

## Exit Window

No "Medium" or "High" risk permissions are found in the protocol that require protection with an Exit Window, but parameters such as protocol fees can be changed by the DAO. Note that the permissions controlled by the DAO are protected with a 1-week on-chain voting window and 2 to 30 days Exit Window for approved updates.

> Exit score: L

## Accessibility

Uniswap is accessible through multiple frontends. Uniswap offers main access through their main deployment: https://app.uniswap.org/. In addition to that,
the frontend app is also hosted on IPFS see here https://github.com/Uniswap/interface/releases. Further details on the maintenance and access of the interface hosted on IPFS can be found [here](https://blog.uniswap.org/uniswap-interface-ipfs). Additionally, users are offered the possibility to self host the frontend from here: https://github.com/Uniswap/interface.

> Accessibility score: L

# Technical Analysis

## Contracts

| Contract Name | Address |
| ------------- | ------- |
| UniswapV2Factory    | 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f   |
| UniswapV2Router02    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |
FROM HERE
| UniswapV2Router01.sol    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |
| UniswapV2Migrator.sol    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |
| UniswapV2Pair.sol    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |
| UniswapV2ERC20.sol    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |
| UniswapV2Router02    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |
| UniswapV2Router02    | 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D   |


## Permission owners

| Name | Account                                       | Type         |
| ---- | --------------------------------------------- | ------------ |
| name | [address](https://etherscan.io/address/0x...) | Multisig x/y |

## Permissions

| Contract      | Function     | Impact      | Owner                   |
| ------------- | ------------ | ----------- | ----------------------- |
| contract name | functionname | description | owner of the permission |

## Dependencies

insert text

## Exit Window

insert text

# Security Council

See http://defiscan.info/learn-more#security-council-requirements for guidance.

change ✅ or ❌ accordingly

| ✅ /❌ | Requirement                                             |
| ------ | ------------------------------------------------------- |
| ❌     | At least 7 signers                                      |
| ❌     | At least 51% threshold                                  |
| ❌     | At least 50% non-team signers                           |
| ❌     | Signers are publicly announced (with name or pseudonym) |
